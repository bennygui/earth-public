<?php

/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * earth implementation : © Guillaume Benny bennygui@gmail.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 */

namespace EA;

require_once('CardDef.php');

trait CardDefMgrEarth
{
    private static function getCardDefEarth()
    {
        return [
            (new CardDefBuilder())->treeId(1)->name(clienttranslate("Japanese Maple"), "Acer palmatum")
                ->soil(3)->score(2)
                ->growth(3, 4)->sprout(4)->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(2)->name(clienttranslate("Prairie Terrain"))
                ->soil(4)->score(2)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_HERB])->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Score 3 points per Herb card in this row'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(3)->name(clienttranslate("Shrubland Terrain"))
                ->soil(2)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_BUSH])->direction(AB_DIRECTION_ORTHO_ADJACENT)
                    ->desc(clienttranslate('Score 3 points per Bush orthogonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->treeId(4)->name(clienttranslate("African Baobab"), "Adansonia digitata")
                ->soil(6)->score(4)
                ->growth(5, 7)->sprout(2)->sunny()->rocky()->bold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(5)->name(clienttranslate("Cat Grass"), "Dactylis glomerata")
                ->soil(0)->score(0)
                ->growth(1, 1)->sprout(6)->sunny()->rocky()->underline()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(6)->name(clienttranslate("Blackthorn"), "Prunus spinosa")
                ->soil(4)->score(2)
                ->growth(3, 4)->sprout(2)->wet()->cold()->italic()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 2)->gain(ABILITY_COMPOST_FROM_HAND, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(7)->name(clienttranslate("Marula"), "Sclerocarya birrea")
                ->soil(4)->score(1)
                ->growth(3, 5)->sprout(5)->sunny()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 1)->gain(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(8)->name(clienttranslate("Elephant Grass"), "Pennisetum purpureum")
                ->soil(6)->score(1)
                ->growth(6, 10)->sprout(3)->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(9)->name(clienttranslate("Roman Brown"), "Agaricus bisporus")
                ->soil(2)->score(2)
                ->sprout(3)->cold()->bold()->italic()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(10)->name(clienttranslate("Stiptic Fungus"), "Panellus stipticus")
                ->soil(0)->score(0)
                ->growth(1, 1)->sprout(1)->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(11)->name(clienttranslate("Penny Bun"), "Boletus edulis")
                ->soil(1)->score(0)
                ->growth(2, 2)->sprout(3)->sunny()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(12)->name(clienttranslate("Mountain Ridge Terrain"))
                ->soil(9)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_ROCKY])->direction(AB_DIRECTION_ORTHO_LINE)
                    ->desc(clienttranslate('Score 2 points per Rocky habitat in one continuous line through orthogonally adjacent cards, including this terrain (line may turn but not backtrack)'))
                    ->faq(clienttranslate("Draw a line that can turn up, down, left and right and that passes only through cards with the right habitat and through this card. You cannot pass through the same card twice. Try to make that line as long as possible. Score 2 points per card it passes through."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->treeId(13)->name(clienttranslate("White Oak"), "Quercus alba")
                ->soil(4)->score(2)
                ->growth(4, 4)->sprout(2)->wet()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(14)->name(clienttranslate("Basil"), "Ocimum basilicum")
                ->soil(3)->score(3)
                ->growth(2, 2)->sprout(6)->wet()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(15)->name(clienttranslate("West India Lantana"), "Lantana camara")
                ->soil(3)->score(1)
                ->growth(2, 3)->sprout(6)->sunny()->wet()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(16)->name(clienttranslate("Yellow Morel"), "Morchella esculenta")
                ->soil(6)->score(7)
                ->growth(1, 3)->sprout(4)->rocky()->cold()->italic()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(17)->name(clienttranslate("Fly Agaric"), "Amanita muscaria")
                ->soil(2)->score(1)
                ->growth(2, 2)->sprout(3)->wet()->rocky()->cold()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(18)->name(clienttranslate("Dragon Blood Tree"), "Dracaena cinnabari")
                ->soil(1)->score(1)
                ->growth(2, 2)->sprout(2)->sunny()->rocky()->cold()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(19)->name(clienttranslate("Tall Fescue"), "Festuca arundinacea")
                ->soil(4)->score(0)
                ->growth(3, 4)->sprout(3)
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(20)->name(clienttranslate("Heather"), "Calluna vulgaris")
                ->soil(2)->score(2)
                ->growth(3, 3)->sprout(2)->sunny()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(21)->name(clienttranslate("American Sycamore"), "Platanus occidentalis")
                ->soil(3)->score(1)
                ->growth(3, 4)->sprout(4)->sunny()->wet()->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(22)->name(clienttranslate("Rosemary"), "Salvia rosmarinus")
                ->soil(3)->score(1)
                ->growth(1, 2)->sprout(5)
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(23)->name(clienttranslate("Ram's Head"), "Grifola frondosa")
                ->soil(3)->score(2)
                ->growth(2, 2)->sprout(5)->sunny()->wet()->underline()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 2)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(24)->name(clienttranslate("Southern Magnolia"), "Magnolia grandiflora")
                ->soil(1)->score(1)
                ->growth(2, 2)->sprout(2)->wet()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 2)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(25)->name(clienttranslate("Oleander"), "Nerium oleander")
                ->soil(1)->score(1)
                ->growth(2, 3)->sprout(3)
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(26)->name(clienttranslate("Beach Terrain"))
                ->soil(7)->score(9)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 4, AB_COND_PER_EMPTY, null])->direction(AB_DIRECTION_ORTHO_ADJACENT)
                    ->desc(clienttranslate('Score 4 points per empty orthogonal space adjacent to this Terrain (outside of island counts)'))
                    ->faq(clienttranslate("You can plant cards diagonally adjacent to cards in your tableau, so it is possible to have 4 empty spaces orthogonal adjacent to this card. In addition, if the Beach Terrain is on the outside edge of your tableau, the spaces outside of your island count toward this goal."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(27)->name(clienttranslate("Crater Terrain"))
                ->soil(9)->score(10)
                ->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 5, AB_COND_PER_TYPE, CARD_TYPE_TREE])->direction(AB_DIRECTION_DIAG_ADJACENT)
                    ->desc(clienttranslate('Score 5 points per Tree diagonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(28)->name(clienttranslate("Pasture Terrain"))
                ->soil(2)->score(1)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_HERB])->direction(AB_DIRECTION_ORTHO_ADJACENT)
                    ->desc(clienttranslate('Score 3 points per Herb orthogonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(29)->name(clienttranslate("Mountain Forest Terrain"))
                ->soil(4)->score(4)
                ->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_TREE])->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Score 3 points per Tree in this column'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(30)->name(clienttranslate("Rocky Mountains Terrain"))
                ->soil(13)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_ROCKY])
                    ->desc(clienttranslate("Score 2 points per Rocky habitat in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the matching habitat for each player and use the number of habitats from the player that has the most for the highest scoring potential. Don't forget to count habitats on the Island and Climate cards on the player boards."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->treeId(31)->name(clienttranslate("Canary Island Palm"), "Phoenix canariensis")
                ->soil(7)->score(1)
                ->growth(4, 8)->sprout(4)->sunny()->bold()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(32)->name(clienttranslate("Spearmint"), "Mentha spicata")
                ->soil(0)->score(1)
                ->sprout(6)->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->gain(ABILITY_COMPOST_FROM_HAND, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(33)->name(clienttranslate("Japanese Andromeda"), "Pieris japonica")
                ->soil(0)->score(1)
                ->growth(1, 1)->sprout(3)->sunny()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(34)->name(clienttranslate("Milk-Cap"), "Lactifluus")
                ->soil(1)->score(2)
                ->growth(2, 2)->sprout(4)->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(35)->name(clienttranslate("Reddish Corky Fungus"), "Fomitopsis pinicola")
                ->soil(3)->score(2)
                ->growth(1, 2)->sprout(6)->sunny()->rocky()->cold()->italic()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(36)->name(clienttranslate("Brown-Rot Fungus"), "Serpula lacrymans")
                ->soil(4)->score(2)
                ->growth(3, 4)->sprout(6)->wet()->italic()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(37)->name(clienttranslate("Red Birch"), "Betula occidentalis")
                ->soil(2)->score(1)
                ->growth(2, 2)->sprout(5)->wet()->rocky()->italic()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(38)->name(clienttranslate("European White Birch"), "Betula pendula")
                ->soil(3)->score(0)
                ->growth(3, 3)->sprout(4)->cold()->bold()->italic()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(39)->name(clienttranslate("Reed Canary Grass"), "Phalaris arundinacea")
                ->soil(4)->score(1)
                ->growth(4, 6)->sprout(4)->sunny()->rocky()->underline()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(40)->name(clienttranslate("Hairy Crabgrass"), "Digitaria sanguinalis")
                ->soil(5)->score(6)
                ->growth(1, 2)->sprout(4)->wet()->rocky()->cold()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(41)->name(clienttranslate("White Jasmine"), "Jasminum polyanthum")
                ->soil(4)->score(1)
                ->growth(4, 5)->sprout(4)->rocky()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(42)->name(clienttranslate("Winter Green Barbery"), "Berberis julianae")
                ->soil(3)->score(1)
                ->growth(4, 5)->sprout(6)->italic()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(43)->name(clienttranslate("Papaya"), "Carica papaya")
                ->soil(4)->score(3)
                ->growth(3, 5)->sprout(5)->sunny()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(44)->name(clienttranslate("Dog Grass"), "Agropyron repens")
                ->soil(2)->score(1)
                ->growth(2, 3)->sprout(6)->rocky()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(45)->name(clienttranslate("Japanese Boxwood"), "Buxus microphylla")
                ->soil(2)->score(1)
                ->growth(1, 1)->sprout(6)->sunny()->wet()->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(46)->name(clienttranslate("Chicken of the Woods"), "Laetiporus sulphureus")
                ->soil(5)->score(5)
                ->growth(3, 5)->sprout(3)->wet()->rocky()->underline()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->treeId(47)->name(clienttranslate("Rubber Tree"), "Hevea brasiliensis")
                ->soil(2)->score(2)
                ->growth(4, 5)->sprout(4)->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(48)->name(clienttranslate("Garlic"), "Allium sativum")
                ->soil(4)->score(2)
                ->growth(3, 3)->sprout(5)
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(49)->name(clienttranslate("Winter Daphne"), "Daphne odora")
                ->soil(1)->score(1)
                ->growth(4, 4)->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(50)->name(clienttranslate("Beefsteak Fungus"), "Fistulina hepatica")
                ->soil(3)->score(2)
                ->growth(2, 4)->sprout(3)->wet()->cold()->underline()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(51)->name(clienttranslate("Shaggy Mane"), "Coprinus comatus")
                ->soil(1)->score(3)
                ->sprout(4)->sunny()->rocky()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(52)->name(clienttranslate("Lobster Mushroom"), "Hypomyces lactifluorum")
                ->soil(3)->score(4)
                ->growth(1, 3)->sprout(4)->sunny()->wet()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(53)->name(clienttranslate("African Mustard"), "Brassica tournefortii")
                ->soil(4)->score(2)
                ->sprout(6)->sunny()->bold()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 2)->gain(ABILITY_COMPOST_FROM_HAND, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(54)->name(clienttranslate("Black Locust"), "Robinia pseudoacacia")
                ->soil(3)->score(1)
                ->growth(2, 3)->sprout(3)->wet()->italic()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(55)->name(clienttranslate("Florence Fennel"), "Foeniculum vulgare")
                ->soil(7)->score(5)
                ->growth(2, 4)->sprout(6)->rocky()->bold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(56)->name(clienttranslate("Mountain Laurel"), "Kalmia latifolia")
                ->soil(5)->score(4)
                ->growth(4, 7)->sunny()->wet()->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(57)->name(clienttranslate("Dog Rose"), "Rosa canina")
                ->soil(4)->score(4)
                ->growth(3, 5)->sprout(3)->underline()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(58)->name(clienttranslate("Black Raspberries"), "Rubus occidentalis")
                ->soil(1)->score(2)
                ->growth(2, 2)->sprout(2)->sunny()->wet()->rocky()->italic()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(59)->name(clienttranslate("Red Pine"), "Pinus resinosa")
                ->soil(2)->score(0)
                ->growth(4, 5)->sprout(3)->rocky()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(60)->name(clienttranslate("Giant Puffball"), "Calvatia gigantea")
                ->soil(4)->score(3)
                ->growth(4, 4)->sprout(2)->sunny()->wet()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(61)->name(clienttranslate("Cloudberry"), "Rubus chamaemorus")
                ->soil(3)->score(2)
                ->growth(1, 1)->sprout(5)->cold()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(62)->name(clienttranslate("English Lavender"), "Lavandula angustifolia")
                ->soil(5)->score(2)
                ->growth(3, 5)->sprout(4)->sunny()->bold()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(63)->name(clienttranslate("Florida Strangler"), "Ficus aurea")
                ->soil(4)->score(2)
                ->growth(5, 7)->wet()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(64)->name(clienttranslate("Turkey Tail"), "Trametes versicolor")
                ->soil(1)->score(2)
                ->growth(1, 1)->wet()->bold()->underline()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(65)->name(clienttranslate("Chinese Quince"), "Pseudocydonia sinensis")
                ->soil(6)->score(4)
                ->growth(4, 6)->sprout(6)->bold()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SOIL, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(66)->name(clienttranslate("Shiitake"), "Lentinula edodes")
                ->soil(7)->score(4)
                ->growth(2, 5)->sprout(3)->sunny()->wet()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(67)->name(clienttranslate("Virginia Strawberry"), "Fragaria virginiana")
                ->soil(1)->score(0)
                ->sprout(2)->sunny()->wet()->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(68)->name(clienttranslate("Wheat"), "Triticum aestivum")
                ->soil(5)->score(4)
                ->growth(3, 5)->sprout(6)
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SOIL, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(69)->name(clienttranslate("Stinking Corpse Lily"), "Rafflesia arnoldii")
                ->soil(6)->score(4)
                ->growth(2, 3)->sprout(4)
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->treeId(70)->name(clienttranslate("Cat Spruce"), "Picea glauca")
                ->soil(2)->score(2)
                ->growth(5, 6)->sprout(2)->cold()->underline()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SOIL, 1)->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(71)->name(clienttranslate("Mistletoe"), "Viscum album")
                ->soil(1)->score(1)
                ->growth(4, 4)->sprout(3)->sunny()->wet()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(72)->name(clienttranslate("Pink Tulip"), "Tulip Gabriella")
                ->soil(1)->score(1)
                ->growth(3, 4)->rocky()->italic()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(73)->name(clienttranslate("Corn"), "Zea mays")
                ->soil(4)->score(2)
                ->growth(4, 6)->sprout(4)->sunny()->wet()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SOIL, 1)->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(74)->name(clienttranslate("Lion's Mane"), "Hericium erinaceus")
                ->soil(1)->score(2)
                ->growth(2, 3)->sprout(4)->wet()->underline()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(75)->name(clienttranslate("Tomato Plant"), "Solanum lycopersicum")
                ->soil(1)->score(0)
                ->growth(1, 1)->sprout(6)->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(76)->name(clienttranslate("Giant Sequoia"), "Sequoiadendron giganteum")
                ->soil(8)->score(1)
                ->growth(8, 13)->sprout(2)->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_GROWTH, 4)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(77)->name(clienttranslate("Parasol Mushroom"), "Macrolepiota procera")
                ->soil(3)->score(0)
                ->growth(3, 4)->sprout(6)->cold()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->treeId(78)->name(clienttranslate("Dwarf Willow"), "Salix herbacea")
                ->soil(2)->score(0)
                ->growth(1, 2)->sprout(6)->rocky()->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(79)->name(clienttranslate("Giant Gilled"), "Tricholoma titans")
                ->soil(5)->score(2)
                ->growth(6, 7)->sprout(4)
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(80)->name(clienttranslate("Northern Highbush Blueberry"), "Vaccinium corymbosum")
                ->soil(4)->score(2)
                ->growth(3, 4)->sprout(4)->wet()->cold()->bold()->italic()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_GROWTH, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(81)->name(clienttranslate("Ginger"), "Zingiber officinale")
                ->soil(1)->score(4)
                ->growth(2, 3)->sprout(2)->wet()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(82)->name(clienttranslate("Soya Bean"), "Glycine max")
                ->soil(0)->score(0)
                ->growth(1, 1)->sprout(6)->sunny()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(83)->name(clienttranslate("Potato Plant"), "Solanum tuberosum")
                ->soil(3)->score(1)
                ->growth(1, 1)->sprout(6)->sunny()->cold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 sprout on each Herb card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(84)->name(clienttranslate("Panther Cap"), "Amanita pantherina")
                ->soil(8)->score(7)
                ->growth(2, 6)->sprout(5)->wet()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->treeId(85)->name(clienttranslate("Apple Tree"), "Malus domestica")
                ->soil(1)->score(2)
                ->growth(3, 3)->sprout(3)->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(86)->name(clienttranslate("Beach Rose"), "Rosa rugosa")
                ->soil(2)->score(0)
                ->growth(3, 3)->sprout(6)->sunny()->rocky()->bold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 sprout on each Bush card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(87)->name(clienttranslate("Bleeding Tooth Fungus"), "Hydnellum peckii")
                ->soil(0)->score(0)
                ->growth(1, 1)->sprout(2)->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(88)->name(clienttranslate("Coriander"), "Coriandrum sativum")
                ->soil(6)->score(5)
                ->growth(2, 2)->sprout(6)->wet()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(89)->name(clienttranslate("Cherry Tree"), "Prunus avium")
                ->soil(4)->score(0)
                ->growth(3, 5)->sprout(6)->italic()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 sprout on each Tree card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(90)->name(clienttranslate("Alfisol Terrain"))
                ->soil(0)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 2)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)
                    ->desc(clienttranslate('All Tree cost 2 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(91)->name(clienttranslate("Aridisol Terrain"))
                ->soil(0)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 2)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)
                    ->desc(clienttranslate('All Bush cost 2 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(92)->name(clienttranslate("Arable Land Terrain"))
                ->soil(0)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 2)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)
                    ->desc(clienttranslate('All Herb cost 2 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(93)->name(clienttranslate("Organic Soil Terrain"))
                ->soil(0)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 2)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)
                    ->desc(clienttranslate('All Mushroom cost 2 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(94)->name(clienttranslate("Solidified Magma Terrain"))
                ->soil(2)->score(5)
                ->sunny()->rocky()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_HABITAT, 1)->condition(AB_COND_PER_HABITAT, CARD_HABITAT_ROCKY)
                    ->desc(clienttranslate('All Rocky habitat cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(95)->name(clienttranslate("Water Pools Terrain"))
                ->soil(2)->score(5)
                ->wet()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_HABITAT, 1)->condition(AB_COND_PER_HABITAT, CARD_HABITAT_WET)
                    ->desc(clienttranslate('All Wet habitat cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(96)->name(clienttranslate("Sand Dunes Terrain"))
                ->soil(2)->score(5)
                ->sunny()->rocky()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_HABITAT, 1)->condition(AB_COND_PER_HABITAT, CARD_HABITAT_SUNNY)
                    ->desc(clienttranslate('All Sunny habitat cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(97)->name(clienttranslate("Tundra Terrain"))
                ->soil(2)->score(5)
                ->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_HABITAT, 1)->condition(AB_COND_PER_HABITAT, CARD_HABITAT_COLD)
                    ->desc(clienttranslate('All Cold habitat cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(98)->name(clienttranslate("Clay Soil Terrain"))
                ->soil(2)->score(9)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 1)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)
                    ->desc(clienttranslate('All Tree cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(99)->name(clienttranslate("Sandy Soil Terrain"))
                ->soil(2)->score(9)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 1)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)
                    ->desc(clienttranslate('All Bush cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(100)->name(clienttranslate("Riverside Terrain"))
                ->soil(2)->score(9)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 1)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)
                    ->desc(clienttranslate('All Herb cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(101)->name(clienttranslate("Fallen Sequoia Terrain"))
                ->soil(2)->score(9)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_REDUCE_COST_FOR_TYPE, 1)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)
                    ->desc(clienttranslate('All Mushroom cost 1 less soil (cannot cost less than 0)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(102)->name(clienttranslate("Desert Terrain"))
                ->soil(13)->score(0)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_SUNNY])
                    ->desc(clienttranslate("Score 2 points per Sunny habitat in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the matching habitat for each player and use the number of habitats from the player that has the most for the highest scoring potential. Don't forget to count habitats on the Island and Climate cards on the player boards."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(103)->name(clienttranslate("Taiga Terrain"))
                ->soil(13)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_COLD])
                    ->desc(clienttranslate("Score 2 points per Cold habitat in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the matching habitat for each player and use the number of habitats from the player that has the most for the highest scoring potential. Don't forget to count habitats on the Island and Climate cards on the player boards."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(104)->name(clienttranslate("Wetland Terrain"))
                ->soil(13)->score(0)
                ->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_WET])
                    ->desc(clienttranslate("Score 2 points per Wet habitat in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the matching habitat for each player and use the number of habitats from the player that has the most for the highest scoring potential. Don't forget to count habitats on the Island and Climate cards on the player boards."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(105)->name(clienttranslate("Tropical Forest Terrain"))
                ->soil(4)->score(2)
                ->wet()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SPROUT, 2)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_TREE])->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Score 3 points per Tree in this row'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(106)->name(clienttranslate("Boreal Forest Terrain"))
                ->soil(5)->score(3)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM])->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Score 3 points per Mushroom in this row'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(107)->name(clienttranslate("Badlands Terrain"))
                ->soil(4)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_BUSH])->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Score 3 points per Bush in this row'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(108)->name(clienttranslate("Mixed Forest Terrain"))
                ->soil(4)->score(4)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM])->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Score 3 points per Mushroom in this column'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(109)->name(clienttranslate("Scrubland Terrain"))
                ->soil(4)->score(2)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_BUSH])->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Score 3 points per Bush in this column'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(110)->name(clienttranslate("Grassland Terrain"))
                ->soil(4)->score(2)
                ->wet()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SPROUT, 2)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_HERB])->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Score 3 points per Herb in this column'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(111)->name(clienttranslate("Cloudforest Terrain"))
                ->soil(2)->score(1)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_TREE])->direction(AB_DIRECTION_ORTHO_ADJACENT)
                    ->desc(clienttranslate('Score 3 points per Tree orthogonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(112)->name(clienttranslate("Plain Terrain"))
                ->soil(9)->score(0)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_SUNNY])->direction(AB_DIRECTION_ORTHO_LINE)
                    ->desc(clienttranslate('Score 2 points per Sunny habitat in one continuous line through orthogonally adjacent cards, including this terrain (line may turn but not backtrack)'))
                    ->faq(clienttranslate("Draw a line that can turn up, down, left and right and that passes only through cards with the right habitat and through this card. You cannot pass through the same card twice. Try to make that line as long as possible. Score 2 points per card it passes through."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(113)->name(clienttranslate("Swamp Terrain"))
                ->soil(1)->score(0)
                ->wet()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 3, AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM])->direction(AB_DIRECTION_ORTHO_ADJACENT)
                    ->desc(clienttranslate('Score 3 points per Mushroom orthogonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(114)->name(clienttranslate("Stream Terrain"))
                ->soil(9)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_WET])->direction(AB_DIRECTION_ORTHO_LINE)
                    ->desc(clienttranslate('Score 2 points per Wet habitat in one continuous line through orthogonally adjacent cards, including this terrain (line may turn but not backtrack)'))
                    ->faq(clienttranslate("Draw a line that can turn up, down, left and right and that passes only through cards with the right habitat and through this card. You cannot pass through the same card twice. Try to make that line as long as possible. Score 2 points per card it passes through."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(115)->name(clienttranslate("Glacier Terrain"))
                ->soil(9)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 2, AB_COND_PER_HABITAT, CARD_HABITAT_COLD])->direction(AB_DIRECTION_ORTHO_LINE)
                    ->desc(clienttranslate('Score 2 points per Cold habitat in one continuous line through orthogonally adjacent cards, including this terrain (line may turn but not backtrack)'))
                    ->faq(clienttranslate("Draw a line that can turn up, down, left and right and that passes only through cards with the right habitat and through this card. You cannot pass through the same card twice. Try to make that line as long as possible. Score 2 points per card it passes through."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(116)->name(clienttranslate("Lake Terrain"))
                ->soil(9)->score(10)
                ->sunny()->wet()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 5, AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM])->direction(AB_DIRECTION_DIAG_ADJACENT)
                    ->desc(clienttranslate('Score 5 points per Mushroom diagonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(117)->name(clienttranslate("Meadow Terrain"))
                ->soil(9)->score(10)
                ->sunny()->rocky()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 5, AB_COND_PER_TYPE, CARD_TYPE_HERB])->direction(AB_DIRECTION_DIAG_ADJACENT)
                    ->desc(clienttranslate('Score 5 points per Herb diagonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(118)->name(clienttranslate("Forest Edge Terrain"))
                ->soil(9)->score(10)
                ->sunny()->wet()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_DIRECTION_CONDITION, 5, AB_COND_PER_TYPE, CARD_TYPE_BUSH])->direction(AB_DIRECTION_DIAG_ADJACENT)
                    ->desc(clienttranslate('Score 5 points per Bush diagonally adjacent to this Terrain'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(119)->name(clienttranslate("Giant Forest Terrain"))
                ->soil(14)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_PIECES, 5, ABILITY_GROWTH, 4])
                    ->desc(clienttranslate('Score 5 points per Flora with 4+ growth'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(120)->name(clienttranslate("Jungle Terrain"))
                ->soil(9)->score(0)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_PIECES, 2, ABILITY_SPROUT, 4])
                    ->desc(clienttranslate('Score 2 points per Flora with 4+ sprouts'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(121)->name(clienttranslate("Redwood Forest Terrain"))
                ->soil(11)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_PIECES, 2, ABILITY_GROWTH, 2])
                    ->desc(clienttranslate('Score 2 points per Flora with 2+ growth'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(122)->name(clienttranslate("Rain Forest Terrain"))
                ->soil(14)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_PIECES, 2, ABILITY_SPROUT, 2])
                    ->desc(clienttranslate('Score 2 points per Flora with 2+ sprouts'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(123)->name(clienttranslate("Savanna Terrain"))
                ->soil(9)->score(0)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_COLOR, AB_COLOR_YELLOW])
                    ->desc(clienttranslate("Score 2 points per Yellow ability in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the cards with the color (including multicolored cards) for each player and use the number of cards from the player that has the most for the highest scoring potential. Don't forget to count Island and Climate cards on the player boards if they have the matching color."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(124)->name(clienttranslate("River Terrain"))
                ->soil(9)->score(0)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_COLOR, AB_COLOR_BLUE])
                    ->desc(clienttranslate("Score 2 points per Blue ability in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the cards with the color (including multicolored cards) for each player and use the number of cards from the player that has the most for the highest scoring potential. Don't forget to count Island and Climate cards on the player boards if they have the matching color."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(125)->name(clienttranslate("Volcano Terrain"))
                ->soil(9)->score(0)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_ANY_ONE_PLAYER_CONDITION, 2, AB_COND_PER_COLOR, AB_COLOR_RED])
                    ->desc(clienttranslate("Score 2 points per Red ability in any one player's area (includes Island and Climate)"))
                    ->faq(clienttranslate("Count the cards with the color (including multicolored cards) for each player and use the number of cards from the player that has the most for the highest scoring potential. Don't forget to count Island and Climate cards on the player boards if they have the matching color."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(126)->name(clienttranslate("Permafrost Terrain"))
                ->soil(2)->score(0)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_LESS_COST, 1, 3])
                    ->desc(clienttranslate('Score 1 point per card costing 3 soil or less'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(127)->name(clienttranslate("Fertile Land Terrain"))
                ->soil(9)->score(0)
                ->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_COST, 2, 4])
                    ->desc(clienttranslate('Score 2 points per card costing 4 soil or more'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(128)->name(clienttranslate("Blossoming Lands Terrain"))
                ->soil(15)->score(4)
                ->sunny()->wet()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_MORE_SCORE, 3, 4])
                    ->desc(clienttranslate('Score 3 points per card with a score of 4 or more'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(129)->name(clienttranslate("Impoverished Land Terrain"))
                ->soil(5)->score(1)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_WITH_LESS_SCORE, 1, 3])
                    ->desc(clienttranslate('Score 1 point per card with a score of 3 or less'))->build())
                ->build(),
            (new CardDefBuilder())->herbId(130)->name(clienttranslate("Mountain Fern Moss"), "Hylocomium splendens")
                ->soil(1)->score(0)
                ->growth(1, 1)->sprout(3)->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(131)->name(clienttranslate("Pheasant's Back"), "Cerioporus squamosus")
                ->soil(4)->score(1)
                ->growth(2, 4)->sprout(4)->wet()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 growth on each Mushroom card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(132)->name(clienttranslate("Honey Fungus"), "Armillaria mellea")
                ->soil(2)->score(1)
                ->growth(1, 1)->sprout(5)->wet()->cold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 sprout on each Mushroom card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->bushId(133)->name(clienttranslate("Old Fashioned Weigela"), "Weigela florida")
                ->soil(5)->score(2)
                ->growth(2, 3)->sprout(3)->rocky()->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->bushId(134)->name(clienttranslate("Dahlia"), "Dahlia pinneta")
                ->soil(0)->score(0)
                ->growth(3, 3)->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 growth on each Bush card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(135)->name(clienttranslate("Lingzhi"), "Ganoderma lingzhi")
                ->soil(6)->score(4)
                ->growth(1, 3)->sprout(5)->wet()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 sprout on each Mushroom card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(136)->name(clienttranslate("Vomiting Russula"), "Russula emetica")
                ->soil(1)->score(0)
                ->sprout(4)->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->herbId(137)->name(clienttranslate("Wall Screw-Moss"), "Tortula muralis")
                ->soil(2)->score(1)
                ->growth(2, 2)->sprout(3)->rocky()->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 growth on each Herb card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->treeId(138)->name(clienttranslate("Cinnamon Tree"), "Cinnamomum verum")
                ->soil(5)->score(3)
                ->growth(3, 4)->sprout(4)->rocky()->italic()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 sprout on each Tree card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->bushId(139)->name(clienttranslate("Bleeding-Heart Vine"), "Clerodendrum thomsoniae")
                ->soil(4)->score(1)
                ->growth(3, 5)->sprout(2)->sunny()->wet()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 2)->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->treeId(140)->name(clienttranslate("Sweet Orange Tree"), "Citrus sinensis")
                ->soil(7)->score(2)
                ->growth(4, 7)->sprout(4)->sunny()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)->direction(AB_DIRECTION_COLUMN)
                    ->desc(clienttranslate('Place up to 1 growth on each Tree card in this column, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->bushId(141)->name(clienttranslate("February Daphne"), "Daphne mezereum")
                ->soil(1)->score(0)
                ->growth(2, 3)->sprout(4)->cold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 sprout on each Bush card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->bushId(142)->name(clienttranslate("Spider Tresses"), "Strophanthus sarmentosus")
                ->soil(1)->score(0)
                ->growth(3, 4)->rocky()->cold()->underline()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 2)->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->treeId(143)->name(clienttranslate("Olive Tree"), "Olea europaea")
                ->soil(0)->score(0)
                ->growth(2, 2)->sprout(1)->sunny()->rocky()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_TREE)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 growth on each Tree card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->herbId(144)->name(clienttranslate("Juniper Polytrichum Moss"), "Polytrichum juniperinum")
                ->soil(2)->score(1)
                ->sprout(6)->rocky()->cold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 sprout on each Herb card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(145)->name(clienttranslate("Jelly Ear"), "Auricularia auricula-judae")
                ->soil(4)->score(6)
                ->growth(2, 2)->sprout(6)->cold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_HAND, 4)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(146)->name(clienttranslate("Golden Chanterelle"), "Cantharellus cibarius")
                ->soil(3)->score(1)
                ->growth(2, 4)->sprout(3)->cold()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_MUSHROOM)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 growth on each Mushroom card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->treeId(147)->name(clienttranslate("Banana Tree"), "Musa acuminata")
                ->soil(3)->score(2)
                ->growth(4, 5)->sprout(6)->wet()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->bushId(148)->name(clienttranslate("Beavertail Cactus"), "Opuntia basilaris")
                ->soil(2)->score(4)
                ->growth(1, 2)->sprout(6)->sunny()->rocky()->underline()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_HAND, 4)->build())
                ->build(),
            (new CardDefBuilder())->herbId(149)->name(clienttranslate("Sun Flower"), "Helianthus annuus")
                ->soil(3)->score(1)
                ->growth(3, 4)->sprout(3)->sunny()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_HERB)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 growth on each Herb card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->treeId(150)->name(clienttranslate("Avocado Tree"), "Persea americana")
                ->soil(6)->score(4)
                ->growth(3, 6)->sprout(6)->sunny()->wet()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->treeId(151)->name(clienttranslate("Shoestring Acacia"), "Acacia stenophylla")
                ->soil(4)->score(1)
                ->growth(3, 6)->sprout(6)->sunny()->rocky()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SOIL, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(152)->name(clienttranslate("Giant Club Cactus"), "Cereus repandus")
                ->soil(7)->score(2)
                ->growth(5, 8)->sprout(3)->sunny()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->condition(AB_COND_ADD_TO_TYPE_IN_DIRECTION)->condition(AB_COND_PER_TYPE, CARD_TYPE_BUSH)->direction(AB_DIRECTION_ROW)
                    ->desc(clienttranslate('Place up to 1 growth on each Bush card in this row, including this card'))->build())
                ->build(),
            (new CardDefBuilder())->bushId(153)->name(clienttranslate("Strangle-Tare"), "Cuscuta epithymum")
                ->soil(0)->score(0)
                ->growth(2, 2)->sprout(5)
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(154)->name(clienttranslate("Jalapeño"), "Capsicum annuum")
                ->soil(2)->score(2)
                ->growth(3, 4)->sprout(4)->sunny()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SOIL, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(155)->name(clienttranslate("Tall Bluestem"), "Andropogon gerardi")
                ->soil(7)->score(3)
                ->growth(4, 7)->sprout(6)->sunny()->italic()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SOIL, 2)->gain(ABILITY_GROWTH, 4)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(156)->name(clienttranslate("Iceman Fungus"), "Fomes fomentarius")
                ->soil(1)->score(1)
                ->sprout(6)->cold()->underline()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(157)->name(clienttranslate("Brittle Prickly Pear"), "Opuntia fragilis")
                ->soil(2)->score(0)
                ->growth(1, 1)->sprout(2)->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->treeId(158)->name(clienttranslate("Umbrella Thorn Acacia"), "Vachellia tortilis")
                ->soil(4)->score(1)
                ->growth(4, 6)->sprout(6)->sunny()->rocky()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SOIL, 2)->gain(ABILITY_GROWTH, 4)->build())
                ->build(),
            (new CardDefBuilder())->bushId(159)->name(clienttranslate("Hardy Kiwi"), "Actinidia arguta")
                ->soil(6)->score(4)
                ->growth(3, 4)->sprout(5)
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->herbId(160)->name(clienttranslate("Grey Reindeer Lichen"), "Cladonia rangiferina")
                ->soil(6)->score(3)
                ->growth(1, 2)->sprout(2)->rocky()->cold()->italic()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(161)->name(clienttranslate("Silver Leaf"), "Chondrostereum purpureum")
                ->soil(1)->score(1)
                ->growth(1, 2)->sprout(2)->cold()->italic()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->bushId(162)->name(clienttranslate("Asparagus"), "Asparagus officinalis")
                ->soil(0)->score(0)
                ->growth(2, 2)->sprout(4)->cold()
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->herbId(163)->name(clienttranslate("Iceland Moss"), "Cetraria islandica")
                ->soil(1)->score(2)
                ->growth(1, 1)->sprout(6)->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(164)->name(clienttranslate("Mycena Chlorophos"), "Mycena chlorophos")
                ->soil(3)->score(2)
                ->growth(1, 1)->sprout(4)->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(165)->name(clienttranslate("Mineral Rich Land Terrain"))
                ->soil(12)->score(1)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_REMAINING_SOIL, 2, 30])
                    ->desc(clienttranslate('Score 2 points per soil in reserve (maximum 30 points)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(166)->name(clienttranslate("Blooming Land Terrain"))
                ->soil(12)->score(1)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_REMAINING_CARD_IN_HAND, 1, 30])
                    ->desc(clienttranslate('Score 1 point per card in hand (maximum 30 points)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(167)->name(clienttranslate("Putrefied Land Terrain"))
                ->soil(12)->score(1)
                ->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_CARD_IN_COMPOST, 1, 30])
                    ->desc(clienttranslate('Score 1 point per card in compost (maximum 30 points)'))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(168)->name(clienttranslate("Red-Caped Scaber Stalk"), "Leccinum aurantiacum")
                ->soil(2)->score(1)
                ->growth(2, 4)->sprout(6)->cold()->italic()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(169)->name(clienttranslate("Wild Syringa"), "Burkea africana")
                ->soil(1)->score(1)
                ->growth(4, 4)->sunny()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(170)->name(clienttranslate("Dahurian Larch"), "Larix gmelinii")
                ->soil(6)->score(6)
                ->growth(4, 6)->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(171)->name(clienttranslate("Saffron Milk Cap"), "Lactarius deliciosus")
                ->soil(0)->score(0)
                ->growth(1, 2)->sprout(4)
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_GROWTH, 2)->build())
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(172)->name(clienttranslate("Field Bindweed"), "Convolvulus arvensis")
                ->soil(6)->score(4)
                ->growth(3, 5)->sprout(5)
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(173)->name(clienttranslate("Black Mangrove"), "Avicennia germinans")
                ->soil(6)->score(4)
                ->growth(2, 4)->sprout(2)->wet()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(174)->name(clienttranslate("Oakmoss"), "Evernia prunastri")
                ->soil(2)->score(0)
                ->growth(2, 2)->sprout(2)->rocky()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(175)->name(clienttranslate("Red Mangrove"), "Rhizophora mangle")
                ->soil(2)->score(2)
                ->growth(3, 4)->sprout(4)->wet()->italic()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(176)->name(clienttranslate("Slippery Jack"), "Suillus luteus")
                ->soil(3)->score(1)
                ->growth(2, 2)->sprout(2)->wet()->cold()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(177)->name(clienttranslate("Bird's-Foot Trefoil"), "Lotus corniculatus")
                ->soil(3)->score(2)
                ->growth(1, 1)->sprout(3)->rocky()->underline()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(178)->name(clienttranslate("Extinct Volcano Terrain"))
                ->soil(7)->score(6)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_DECK, 2)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_CANNOT_CHOOSE_COLOR, 1)->condition(AB_COND_IF_CHOOSE_COLOR, AB_COLOR_RED)
                    ->desc(clienttranslate('You cannot choose the Red Action when you are the active player'))
                    ->faq(clienttranslate("You cannot choose the Red Action when you are the active player. The other players can choose this action, and in this case, you can play the selected action and activate your cards normally."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(179)->name(clienttranslate("Circumpolar Barren Land Terrain"))
                ->soil(6)->score(6)
                ->sunny()->wet()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_CANNOT_CHOOSE_COLOR, 1)->condition(AB_COND_IF_CHOOSE_COLOR, AB_COLOR_YELLOW)
                    ->desc(clienttranslate('You cannot choose the Yellow Action when you are the active player'))
                    ->faq(clienttranslate("You cannot choose the Yellow Action when you are the active player. The other players can choose this action, and in this case, you can play the selected action and activate your cards normally."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(180)->name(clienttranslate("Fertile Rainless Land Terrain"))
                ->soil(8)->score(8)
                ->sunny()->rocky()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SPROUT, 3)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_CANNOT_CHOOSE_COLOR, 1)->condition(AB_COND_IF_CHOOSE_COLOR, AB_COLOR_BLUE)
                    ->desc(clienttranslate('You cannot choose the Blue Action when you are the active player'))
                    ->faq(clienttranslate("You cannot choose the Blue Action when you are the active player. The other players can choose this action, and in this case, you can play the selected action and activate your cards normally."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->bushId(181)->name(clienttranslate("Common Onion"), "Allium cepa")
                ->soil(3)->score(2)
                ->growth(1, 2)->sprout(6)->wet()->cold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(182)->name(clienttranslate("Organ Pipe Cactus"), "Stenocereus thurberi")
                ->soil(4)->score(0)
                ->growth(4, 6)->sprout(3)->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(183)->name(clienttranslate("Elegan Sunburst Lichen"), "Xanthoria elegans")
                ->soil(7)->score(4)
                ->sprout(3)->rocky()->cold()
                ->ability((new AbilityBuilder())->yellow()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(184)->name(clienttranslate("Sacred Lotus"), "Nelumbo nucifera")
                ->soil(8)->score(5)
                ->growth(1, 5)->sprout(1)->wet()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 2)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(185)->name(clienttranslate("Victoria Amazonica"), "Victoria amazonica")
                ->soil(3)->score(0)
                ->growth(2, 2)->sprout(5)->wet()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(186)->name(clienttranslate("White Water Lily"), "Nymphaea alba")
                ->soil(2)->score(0)
                ->growth(2, 2)->sprout(5)->wet()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(187)->name(clienttranslate("Mountain Aspen"), "Populus tremuloides")
                ->soil(4)->score(4)
                ->growth(3, 5)->sprout(3)->cold()->bold()
                ->ability((new AbilityBuilder())->red()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(188)->name(clienttranslate("Venus Flytrap"), "Dionaea muscipula")
                ->soil(6)->score(4)
                ->growth(1, 3)->sprout(6)->sunny()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(189)->name(clienttranslate("Great Pitcher Plant"), "Nepenthes maxima")
                ->soil(2)->score(0)
                ->growth(4, 4)->sprout(3)
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 1)->build())
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(190)->name(clienttranslate("Horn Of Plenty"), "Craterellus cornucopioides")
                ->soil(3)->score(3)
                ->growth(1, 2)->sprout(5)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_COMPOST, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with Cards you compost from your hand instead of soil (1 card = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(191)->name(clienttranslate("Indian Oyster"), "Pleurotus pulmonarius")
                ->soil(4)->score(5)
                ->sprout(3)->bold()->underline()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_COMPOST, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with Cards you compost from your hand instead of soil (1 card = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->treeId(192)->name(clienttranslate("English Walnut"), "Juglans regia")
                ->soil(3)->score(1)
                ->growth(4, 6)->sprout(5)->bold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_SPROUT, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with sprouts instead of soil (1 sprout = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->treeId(193)->name(clienttranslate("American Beech"), "Fagus grandifolia")
                ->soil(4)->score(4)
                ->growth(2, 3)->sprout(2)->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_SPROUT, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with sprouts instead of soil (1 sprout = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->treeId(194)->name(clienttranslate("Giant Bearded Fig"), "Ficus citrifolia")
                ->soil(1)->score(3)
                ->growth(3, 5)->sprout(4)->sunny()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_GROWTH, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with growth instead of soil (1 growth = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->treeId(195)->name(clienttranslate("Strangler Fig"), "Ficus watkinsiana")
                ->soil(4)->score(4)
                ->growth(2, 3)->sprout(4)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_PLANT_PAY_WITH_GROWTH, 1)
                    ->desc(clienttranslate("You may pay all/some of this Flora's cost with growth instead of soil (1 growth = 1 less soil)"))->build())
                ->build(),
            (new CardDefBuilder())->eventId(196)->name(clienttranslate("Hurricane Event"))->score(-1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 3)->gain(ABILITY_SPROUT, 6)->build())
                ->build(),
            (new CardDefBuilder())->eventId(197)->name(clienttranslate("Tsunami Event"))->score(-4)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 5)->gain(ABILITY_DRAW_CARD_FROM_DECK, 6)->build())
                ->build(),
            (new CardDefBuilder())->eventId(198)->name(clienttranslate("Earthquake Fissure Event"))->score(-1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 5)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_COMPOST_FROM_DECK, 8)->build())
                ->build(),
            (new CardDefBuilder())->eventId(199)->name(clienttranslate("Volcanic Erruption Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 7)->gain(ABILITY_SOIL, 8)->build())
                ->build(),
            (new CardDefBuilder())->eventId(200)->name(clienttranslate("Tornado Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(201)->name(clienttranslate("Typhoon Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 4)->gain(ABILITY_SPROUT, 8)->build())
                ->build(),
            (new CardDefBuilder())->eventId(202)->name(clienttranslate("Tropical Storm Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 2)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(203)->name(clienttranslate("Lightning Event"))->score(1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(204)->name(clienttranslate("Blizzard Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_DRAW_CARD_FROM_DECK, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(205)->name(clienttranslate("Hail Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 2)->gain(ABILITY_COMPOST_FROM_DECK, 5)->build())
                ->build(),
            (new CardDefBuilder())->eventId(206)->name(clienttranslate("Lava Flow Event"))->score(-3)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 4)->gain(ABILITY_DRAW_CARD_FROM_DECK, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(207)->name(clienttranslate("Lava Tube Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SOIL, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(208)->name(clienttranslate("Lava Lake Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(209)->name(clienttranslate("High Tide Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SOIL, 2)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(210)->name(clienttranslate("Low Tide Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 4)->gain(ABILITY_SOIL, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(211)->name(clienttranslate("Earthquake Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 2)->gain(ABILITY_COMPOST_FROM_DECK, 5)->build())
                ->build(),
            (new CardDefBuilder())->eventId(212)->name(clienttranslate("Heat Wave Event"))->score(-3)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 3)->gain(ABILITY_GROWTH, 6)->build())
                ->build(),
            (new CardDefBuilder())->eventId(213)->name(clienttranslate("Snow Event"))->score(-1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(214)->name(clienttranslate("Flash Flood Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 4)->gain(ABILITY_GROWTH, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(215)->name(clienttranslate("Flooding Event"))->score(1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_COMPOST_FROM_DECK, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(216)->name(clienttranslate("Dust Storm Event"))->score(-2)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 5)->gain(ABILITY_SOIL, 6)->build())
                ->build(),
            (new CardDefBuilder())->eventId(217)->name(clienttranslate("Waterspout Event"))->score(-1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(218)->name(clienttranslate("Landslide Event"))->score(-3)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SOIL, 4)->gain(ABILITY_DRAW_CARD_FROM_DECK, 4)->gain(ABILITY_COMPOST_FROM_DECK, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(219)->name(clienttranslate("Wildfire Event"))->score(-4)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 6)->gain(ABILITY_DRAW_CARD_FROM_DECK, 6)->build())
                ->build(),
            (new CardDefBuilder())->eventId(220)->name(clienttranslate("Cold Front Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_COMPOST_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(221)->name(clienttranslate("Geyser Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(222)->name(clienttranslate("Steam Vents Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(223)->name(clienttranslate("Mudpot Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->eventId(224)->name(clienttranslate("Rainbow Event"))->score(1)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->eventId(225)->name(clienttranslate("Jokulhaup Event"))->score(-4)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 5)->pay(ABILITY_GROWTH, 4)->gain(ABILITY_SOIL, 6)->gain(ABILITY_DRAW_CARD_FROM_DECK, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(226)->name(clienttranslate("Fog Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(227)->name(clienttranslate("Clamshell Orchid"), "Prosthechea cochleata")
                ->soil(3)->score(4)
                ->growth(1, 3)->sprout(2)->rocky()->sunny()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(228)->name(clienttranslate("Tiger Orchid"), "Grammatophyllum speciosum")
                ->soil(7)->score(4)
                ->growth(6, 10)->sprout(2)->wet()->underline()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(229)->name(clienttranslate("Western Jack-O'-Lantern"), "Omphalotus olivascens")
                ->soil(4)->score(1)
                ->growth(2, 3)->sprout(6)->cold()->bold()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(230)->name(clienttranslate("Lava Plain Terrain"))
                ->soil(1)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_PLANT_FREE_COLOR_COMPOST_AND_DRAW, 2)->condition(AB_COND_PER_COLOR, AB_COLOR_RED)
                    ->desc(clienttranslate('Instead of Planting, compost this card and replace with a card with a Red ability at no cost. Then draw 2 cards.'))
                    ->faq(clienttranslate("This card replacement takes up one Planting action so this can only be done when the Planting action is chosen. You can replace it with a multicolored card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(231)->name(clienttranslate("Alluvial Sediments Terrain"))
                ->soil(3)->score(0)
                ->wet()->rocky()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_SPROUT, 2)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_PLANT_FREE_COLOR_COMPOST_AND_DRAW, 2)->condition(AB_COND_PER_COLOR, AB_COLOR_BLUE)
                    ->desc(clienttranslate('Instead of Planting, compost this card and replace with a card with a Blue ability at no cost. Then draw 2 cards.'))
                    ->faq(clienttranslate("This card replacement takes up one Planting action so this can only be done when the Planting action is chosen. You can replace it with a multicolored card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(232)->name(clienttranslate("Flatland Terrain"))
                ->soil(1)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->green()->gain(ABILITY_GROWTH, 1)->build())
                ->ability((new AbilityBuilder())->brown()->gain(ABILITY_PLANT_FREE_COLOR_COMPOST_AND_DRAW, 2)->condition(AB_COND_PER_COLOR, AB_COLOR_YELLOW)
                    ->desc(clienttranslate('Instead of Planting, compost this card and replace with a card with a Yellow ability at no cost. Then draw 2 cards.'))
                    ->faq(clienttranslate("This card replacement takes up one Planting action so this can only be done when the Planting action is chosen. You can replace it with a multicolored card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->eventId(233)->name(clienttranslate("Aurora Borealis Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(234)->name(clienttranslate("Hot Spring Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 3)->gain(ABILITY_SPROUT, 4)->build())
                ->build(),
            (new CardDefBuilder())->treeId(235)->name(clienttranslate("Rainbow Eucalyptus"), "Eucalyptus deglupta")
                ->soil(8)->score(1)
                ->growth(5, 9)->sprout(6)->sunny()->wet()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->gain(ABILITY_GROWTH, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(236)->name(clienttranslate("Bald Cypress"), "Taxodium distichum")
                ->soil(2)->score(2)
                ->growth(2, 3)->sprout(3)->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(237)->name(clienttranslate("Chinese Wisteria"), "Wisteria sinensis")
                ->soil(7)->score(2)
                ->growth(4, 6)->sprout(6)->sunny()->wet()->cold()->bold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->treeId(238)->name(clienttranslate("Balsam Fir"), "Abies balsamea")
                ->soil(3)->score(2)
                ->growth(4, 6)->sprout(4)->cold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(239)->name(clienttranslate("Red Cage Fungus"), "Clathrus ruber")
                ->soil(1)->score(3)
                ->growth(1, 1)->sprout(6)->cold()->italic()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_HAND, 3)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(240)->name(clienttranslate("Starfish Fungus"), "Aseroe rubra")
                ->soil(2)->score(2)
                ->growth(2, 3)->sprout(4)->rocky()->underline()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SOIL, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(241)->name(clienttranslate("Yellow Staghorn"), "Calocera viscosaw")
                ->soil(8)->score(7)
                ->growth(3, 6)->sprout(5)->italic()->underline()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(242)->name(clienttranslate("Blue Milk"), "Lactarius indigo")
                ->soil(3)->score(1)
                ->growth(3, 5)->sprout(5)->italic()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(243)->name(clienttranslate("Hairawn Muhly"), "Muhlenbergia capillaris")
                ->soil(5)->score(4)
                ->growth(2, 4)->sprout(4)->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(244)->name(clienttranslate("Painted Nettle"), "Coleus scutellarioides")
                ->soil(2)->score(2)
                ->growth(3, 5)->sprout(5)
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_GROWTH, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(245)->name(clienttranslate("New Zealand Flax"), "Phormium tenax")
                ->soil(9)->score(4)
                ->growth(4, 5)->sprout(6)->sunny()->bold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->herbId(246)->name(clienttranslate("Bee Balm"), "Monarda didyma")
                ->soil(3)->score(1)
                ->growth(1, 1)->sprout(6)->rocky()->underline()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SOIL, 1)->gain(ABILITY_COMPOST_FROM_HAND, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(247)->name(clienttranslate("Rainbow Plant"), "Houttuynia cordata")
                ->soil(5)->score(2)
                ->growth(4, 5)->sprout(6)->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(248)->name(clienttranslate("Purple Passionflower"), "Passiflora incarnata")
                ->soil(3)->score(3)
                ->growth(3, 4)->sprout(5)->italic()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_SPROUT, 1)->build())
                ->build(),
            (new CardDefBuilder())->bushId(249)->name(clienttranslate("Edible Amaranth"), "Amaranthus tricolor")
                ->soil(8)->score(5)
                ->growth(5, 7)->sprout(6)->sunny()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SPROUT, 1)->gain(ABILITY_COMPOST_FROM_HAND, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(250)->name(clienttranslate("Persian Shield"), "Strobilanthes dyeriana")
                ->soil(4)->score(1)
                ->growth(4, 5)->sprout(4)->sunny()->bold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(251)->name(clienttranslate("Curry Tree"), "Murraya koenigii")
                ->soil(1)->score(1)
                ->growth(2, 2)->sprout(5)
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->pay(ABILITY_COMPOST_DESTROY, 1)->gain(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 2)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(252)->name(clienttranslate("Cookeina"), "Cookeina speciosa")
                ->soil(2)->score(0)
                ->growth(3, 3)->sprout(3)->wet()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SPROUT, 1)->pay(ABILITY_GROWTH, 1)->gain(ABILITY_COMPOST_FROM_HAND, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->herbId(253)->name(clienttranslate("Chives"), "Allium schoenoprasum")
                ->soil(4)->score(0)
                ->growth(1, 1)->sprout(4)->sunny()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_COMPOST_DESTROY, 1)->pay(ABILITY_GROWTH, 1)->gain(ABILITY_SPROUT, 1)->gain(ABILITY_SOIL, 2)->build())
                ->build(),
            (new CardDefBuilder())->bushId(254)->name(clienttranslate("Chinese Peony"), "Paeonia lactiflora")
                ->soil(5)->score(1)
                ->growth(4, 5)->sprout(6)->sunny()->rocky()->bold()
                ->ability((new AbilityBuilder())->multicolor()->pay(ABILITY_SOIL, 1)->pay(ABILITY_SPROUT, 1)->gain(ABILITY_GROWTH, 1)->gain(ABILITY_DRAW_CARD_FROM_DECK, 1)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(255)->name(clienttranslate("Flooded Delta Terrain"))
                ->soil(10)->score(4)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SPROUT, 13)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(256)->name(clienttranslate("Bamboo Forest Terrain"))
                ->soil(8)->score(4)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_GROWTH, 10)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(257)->name(clienttranslate("Monsoon Irrigated Plateau Terrain"))
                ->soil(9)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_COMPOST_FROM_HAND, 20)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(258)->name(clienttranslate("Volcanic Grounds Terrain"))
                ->soil(1)->score(4)
                ->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SOIL, 6)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(259)->name(clienttranslate("Compost Filled Grounds Terrain"))
                ->soil(1)->score(4)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->gain(ABILITY_COMPOST_FROM_HAND, 4)->build())
                ->build(),
            (new CardDefBuilder())->eventId(260)->name(clienttranslate("Supernovae Event"))->score(1)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_COMPOST_DESTROY, 2)->gain(ABILITY_GROWTH, 2)->build())
                ->build(),
            (new CardDefBuilder())->eventId(261)->name(clienttranslate("Comet Event"))->score(-3)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 3)->pay(ABILITY_GROWTH, 3)->gain(ABILITY_SOIL, 4)->gain(ABILITY_DRAW_CARD_FROM_DECK, 3)->build())
                ->build(),
            (new CardDefBuilder())->eventId(262)->name(clienttranslate("Shooting Star Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_DRAW_CARD_FROM_COMPOST, 3)
                    ->desc(clienttranslate('Draw the top 3 cards of your compost. Keep 1. Return the other 2.'))
                    ->faq(clienttranslate("The 2 cards you do not choose are returned to your compost."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->eventId(263)->name(clienttranslate("Asteroid Event"))->score(-4)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 5)->pay(ABILITY_GROWTH, 4)->gain(ABILITY_SOIL, 8)->gain(ABILITY_COMPOST_FROM_DECK, 5)->build())
                ->build(),
            (new CardDefBuilder())->eventId(264)->name(clienttranslate("Solar Flare Event"))->score(0)
                ->ability((new AbilityBuilder())->black()->pay(ABILITY_SPROUT, 1)->pay(ABILITY_GROWTH, 2)->gain(ABILITY_DRAW_CARD_FROM_DECK, 3)->build())
                ->build(),
            (new CardDefBuilder())->herbId(265)->name(clienttranslate("Tor-Grass"), "Brachypodium pinnatum")
                ->soil(5)->score(1)
                ->growth(2, 3)->sprout(6)->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SPROUT, 5)->build())
                ->build(),
            (new CardDefBuilder())->bushId(266)->name(clienttranslate("Red Gram"), "Cajanus cajan")
                ->soil(1)->score(0)
                ->growth(1, 1)->sprout(5)->wet()->italic()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SOIL, 4)->build())
                ->build(),
            (new CardDefBuilder())->treeId(267)->name(clienttranslate("Pomegranate Tree"), "Punica granatum")
                ->soil(6)->score(4)
                ->growth(3, 5)->sprout(4)->sunny()->wet()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_DRAW_CARD_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->treeId(268)->name(clienttranslate("Woolly Buckeye"), "Aesculus pavia")
                ->soil(5)->score(2)
                ->growth(1, 3)->sprout(5)->sunny()->rocky()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 growth on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->treeId(269)->name(clienttranslate("Japanese Stewartia"), "Stewartia pseudocamellia")
                ->soil(3)->score(3)
                ->growth(2, 4)->sprout(1)->wet()->cold()->bold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 sprouts on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->terrainId(270)->name(clienttranslate("Volcanic Ash Plain Terrain"))
                ->soil(0)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_SPROUT, 7)->build())
                ->build(),
            (new CardDefBuilder())->bushId(271)->name(clienttranslate("Angel's Trumpets"), "Brugmansia candida")
                ->soil(3)->score(1)
                ->growth(5, 7)->wet()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 growth on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->bushId(272)->name(clienttranslate("Jojoba"), "Simmondsia chinensis")
                ->soil(2)->score(1)
                ->growth(5, 6)->sprout(3)->sunny()->rocky()->cold()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(273)->name(clienttranslate("Sunny Hillside Terrain"))
                ->soil(2)->score(2)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_GROWTH, 7)->build())
                ->build(),
            (new CardDefBuilder())->herbId(274)->name(clienttranslate("Sensitive Plant"), "Mimosa pudica")
                ->soil(2)->score(1)
                ->growth(3, 3)->sprout(3)->sunny()->rocky()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 sprouts on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->herbId(275)->name(clienttranslate("Celery"), "Apium graveolens")
                ->soil(2)->score(2)
                ->growth(2, 4)->sprout(6)
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->terrainId(276)->name(clienttranslate("Luxuriant Woodland Terrain"))
                ->soil(4)->score(4)
                ->sunny()->wet()->rocky()
                ->ability((new AbilityBuilder())->black()->gain(ABILITY_DRAW_CARD_FROM_DECK, 5)->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(277)->name(clienttranslate("Slime Mold"), "Leocarpus fragilis")
                ->soil(1)->score(1)
                ->sprout(4)->cold()->underline()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_GROWTH, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 growth on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(278)->name(clienttranslate("Purple Jellydisc"), "Ascocoryne sarcoides")
                ->soil(4)->score(2)
                ->growth(1, 1)->sprout(6)->sunny()->cold()->italic()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_SPROUT, 3)->direction(AB_DIRECTION_ALL_ADJACENT)
                    ->desc(clienttranslate('Gain up to 3 sprouts on any of the 8 adjacent Flora cards'))
                    ->faq(clienttranslate("You can place a total of 3 pieces distributed as you want on any of the adjacent cards. You do not place 3 pieces on each card."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->mushroomId(279)->name(clienttranslate("Parrot Waxcap"), "Gliophorus psittacinus")
                ->soil(4)->score(5)
                ->growth(1, 2)->sprout(5)->sunny()->cold()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COMPOST_FROM_DECK, 2)->build())
                ->build(),
            (new CardDefBuilder())->jokerId(280)->name(clienttranslate("Swamp Sprouts"))
                ->soil(8)->score(0)
                ->growth(2, 3)->sprout(2)->sunny()->wet()->rocky()->cold()->bold()
                ->ability((new AbilityBuilder())->blue()->gain(ABILITY_COPY_OTHER_ABILITY, 1)->condition(AB_COND_PER_COLOR, AB_COLOR_BLUE)
                    ->desc(clienttranslate('Copy one Blue ability from your island/climate/tableau (may change each use)'))
                    ->faq(clienttranslate('You can copy the ability of a multicolored card. If you copy an ability with instructions, you apply the instructions as if the ability was on the card with the copy ability. For example, if you have a “Swamp Sprouts” in the second column, and you copy the ability from a card in the first column that adds sprouts in the same column as that card, the sprouts are added in the second column since “Swamp Sprouts” (the card which copied the ability) is in the second column.'))
                    ->build())
                ->ability((new AbilityBuilder())->brown()
                    ->desc(clienttranslate('Count as all Flora types when scoring (Mushroom, Herb, Bush, Tree)'))
                    ->faq(clienttranslate("Also counts as all Flora types for abilities. For example, an ability that adds sprouts on Bush will add sprouts on this card as well."))
                    ->build())
                ->build(),
            (new CardDefBuilder())->jokerId(281)->name(clienttranslate("Dragon Sprouts"))
                ->soil(8)->score(0)
                ->growth(2, 3)->sprout(2)->sunny()->wet()->rocky()->cold()->underline()
                ->ability((new AbilityBuilder())->red()->gain(ABILITY_COPY_OTHER_ABILITY, 1)->condition(AB_COND_PER_COLOR, AB_COLOR_RED)
                    ->desc(clienttranslate('Copy one Red ability from your island/climate/tableau (may change each use)'))->build())
                ->ability((new AbilityBuilder())->brown()
                    ->desc(clienttranslate('Count as all Flora types when scoring (Mushroom, Herb, Bush, Tree)'))->build())
                ->build(),
            (new CardDefBuilder())->jokerId(282)->name(clienttranslate("Yellow Sprouts"))
                ->soil(8)->score(0)
                ->growth(2, 3)->sprout(2)->sunny()->wet()->rocky()->cold()->italic()
                ->ability((new AbilityBuilder())->yellow()->gain(ABILITY_COPY_OTHER_ABILITY, 1)->condition(AB_COND_PER_COLOR, AB_COLOR_YELLOW)
                    ->desc(clienttranslate('Copy one Yellow ability from your island/climate/tableau (may change each use)'))->build())
                ->ability((new AbilityBuilder())->brown()
                    ->desc(clienttranslate('Count as all Flora types when scoring (Mushroom, Herb, Bush, Tree)'))->build())
                ->build(),
            (new CardDefBuilder())->terrainId(283)->name(clienttranslate("Gigantic Island Terrain"))
                ->soil(12)->score(0)
                ->sunny()->wet()->rocky()->cold()
                ->ability((new AbilityBuilder())->brown()->scores([AB_SCORE_PER_TERRAIN, 3])
                    ->desc(clienttranslate('Score 3 points per Terrain, including this card'))->build())
                ->build(),
        ];
    }
}
